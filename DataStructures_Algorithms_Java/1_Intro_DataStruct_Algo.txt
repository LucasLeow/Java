== 1 Intro to Data Structures ==
    - a way to organize data
    - use data structures to organize huge data into memory
        - easier to process
        - efficiently access data
    eg:
        - messy library with books everywhere
        - take a lot of time to find particular book
        vs
        - neatly arranged books by authors name
        - faster to find books

    -- types of data structures --
        1) Linear
            - data arranged sequentially
            - each member connected to previous & next element
            - easy to traverse (single level)
            - easy to implement  (stored sequentially)
            - Array | LinkedList | Stacks | Queues

        2) Non-Linear
            - data arranged not in sequence
            - connected through different paths
            - multiple levels (different ways to traverse)
                - need more time to traverse
            - not easy to implement
            - Tree | Graph

== 2 Intro to Algorithms ==
    - Set of instructions to perform task / solve problem
    - typically done with pseudo-coding then implemented with code 
        - sequence of steps
        - implement code
        - test / troubleshoot

== 3 Algorithm Analysis Intro ==
    - Several different algorithms possible to solve a given problem
    - need to analyze which is the best to use
        - Time Complexity
        - Space Complexity (memory)

        eg: Find sum of first n natural numbers

            Mathematical approach: (O(1))
                sum = n * (n + 1) / 2;

            Programming approach: (O(n))
                int sum = 0;
                for (int i = 1; i <= n; i++) {
                    sum+=i;
                }

                * Math approach is better in this scenario

== 4 Time Complexity of Algorithms ==
    - Amount of time taken by algorithm to run
    - efficient algorithm = faster execution
    - different mathematical tools exists to help evaluate time complexity
    - if simply perform on local machine, its only based on the processing power of the local machine

== 5 Space Complexity of Algorithms ==
    - amount of memory taken by algorithm to run
        - i.e memory taken by algorithm to solve problem
    - Mathematical tools exist to help determine space & time complexity
        - Known as asymptotic analysis of algorithm

== 6 Asymptotic Analysis of Algorithm ==
    - evalaute performance of algorithm in terms of input size & its increase
        - if increase input size, how much more time / space does algorithm take
    - does not measure actual time taken of algorithm
        - dependent on machine
    - how much more time / space taken when input size increase
        - scales similarly in different devices
    - if no input, then constant time

== 7 Asymptotic Notations ==
    - Mathematical expressions to describe running time of algorithm dependent on input size
        eg:

        Performance of car in 1L of petrol? (How much car travels)
            - Highway: 25km / L
            - City: 15km / L 
            - City + Highway: 20km / L
            due to varying traffic
            - Never a fixed answer
            - Gives rough idea of how algorithm will perform in different scenarios

        Asymptotic Notation
            - Best case (Omega Notation) (least time, least memory) (lower bound)
                - can take more than specified value, but nothing less

            - Average case (Theta Notation) (avg time, avg memory)
                - considers the average for all runs

            - Worst case (Big O Notation) (most time, most memory) (upper bound)
                - can take less than specified value but nothing more