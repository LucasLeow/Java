Java:
	- class based
	- object oriented programming (based on C & C++)
	- console | GUI | web | mobile | game development | embedded systems
		- televisions | washing machines | air-conditioners etc.
		
	- "Write-Once, Run Anywhere"
	
	- 3 Editions of Java (based on type of development)
		- Java Standard Edition (Java SE) (contain core libraries)
		- Java Enterprise Edition (APIs like JMS, EJB, JSP, Servlets etc.)
		- Java Micro Edition (Cellphones | set-top boxes | handhelds etc.)
		
		
	- Source Code (.java) -> Compiler -> bytecode (.class) -> Java Interpreter
		- .class files typically saved in "bin" dir
	
	- Java code run on JVM (Java virtual machine)
		- provides the runtime-environment
		
	
== Java Setup ==
	- Download the Java SDK 

== Java Syntax ==

* File name must be same as class name
	- to allow JVM to know entrypoint for program
	- if multiple classes within single source (.java) file,
		- multiple .class files will still be created
		- to distinguish entrypoint, JVM will look for name match


For Main.java:

	public class Main {

		public static void main(String[] args) {
			// TODO Auto-generated method stub
			System.out.println("Hello World");
		}

	}
		


== Data Types in Java ==

	1) Primitive
		- int
		- long
		- short
		- byte
		
		- float
		- double
		
		- boolean
		
		- char
		
	2) Reference
	
		- Arrays
		- String
		- Objects
	
	
	
== Java Input ==
	import java.util.Scanner;
	
	public class Main {
		public static void main(String[] args) {
			Scanner sc = new Scanner(System.in);
			
			boolean myBool = sc.nextBoolean();
			byte myByte = sc.nextByte();
			double myDouble = sc.nextDouble();
			float myFloat =  sc.nextFloat();
			int myInt = sc.nextInt();
			String myString = sc.nextLine();
			long myLong = sc.nextLong();
			short myShort = sc.nextShort();
		}
	}
	
	** IMPORTANT
	
	- nextInt() or any of the next<type>() does not read in newline character
		- newline character caused by user hitting "Enter" upon submission
		- Scanner.nextLine() will read in newline character
		- even next() will also cause this problem
		- only nextLine() followed by a nextLine() will not cause this problem
		
	Solution:
		- put a nextLine() call after each nextFoo to consume the newline char
		
		
		
== next() vs nextLine() ==
	- next() : read input only until whitespace. Cannot read two words separated by whitespace
		- also places cursor in same line after reading input
		
	- nextLine() reads input including whitespaces, until \n (newline detected)
		- places cursor in next line
