Course Learnings:
- Use Hibernate / JPA (Java Persistence API) for database access
- REST API using Spring Boot
- Spring MVC app
- Springboot app to DB for CRUD
- Spring Security to control app access
- Use Java config (no XML) & Maven


Latest version (2023)
    - Spring Boot 3
    - Spring 6
    - IntelliJ


JDK | JRE | JVM

To compile Java code: Need Java Development Kit (JDK)
    - .java -> .class
    - when installing JDK, JRE & JVM installed together

JVM: To run .class code

JRE: contains all the Java API libraries
    - JVM within JRE (JVM part of JRE, cannot have JVM without JRE)




== SpringBoot Overview ==
    -  popular framework for Java app
    - large number of helper classes & annotations

    Problem: (when building Spring app)
        1) Which JAR dependencies needed
            - Java ARchive: many Java classes zipped together
        2) How to set up config (XML or Java)
        3) How to install server (Tomcat / JBoss etc.)  
    
    Solution (Springboot):
        - minimize amount of manual config
        - auto config based on prop-files & JAR classpath
        - resolve dependency conflicts (Maven or Gradle) -> think of Maven / Gradle like npm / pip
        - embedded HTTP server for quick start

    -- Springboot vs Spring --
        - Springboot wraps around Spring (makes it easier to use Spring)
    

    -- Spring Initializer --
        - Quickstart Spring boot project
            1) go to https://start.spring.io
            2) Select dependencies
            3) Creates Maven/Gradle project (downloadable)
            4) Import project into IDE

    
    - Springboot provides embedded server
        - inside mycoolapp.jar
            - contains source code (.java files)
            - Tomcat | Jetty | Undertow etc. server
        - Self-contained unit, don't have to install anything else
        - Can run Springboot app standalone (from IDE / cmdline)
            java -jar mycoolapp.jar


    - Deploying Springboot App -
        - Can be deployed traditionally (WAR file) to external server (Tomcat | JBoss | Websphere etc.)
            WAR: Web App Archive

            eg:

                Within Tomcat Server 1:

                    1) mycoolapp.war
                    2) travelapp.war
                    3) shoppingapp.war

                    3 apps deployed in Server 1


    -- FAQs --
        1) Does Springboot replace Spring MVC / Spring REST?
            - No, Springboot wraps around those technologies
                - Spring MVC | REST | Core | AOP etc.
            - Springboot is just helping to get setup quickly with configuration
        
        2) Does Springboot run faster than Spring code?
            - No, Springboot wraps around Spring framework



== What is Maven ==
    - Project Management Tool like npm (build-automation tool)
        - build management + dependencies management

    - When building java project, may require additional JAR files
        - Spring | Hibernate | Commons logging | JSON etc.

        Manual Solution:
            - Go to each project website to download JAR files
            - Manually add JAR files to build path

        Maven Solution: (think like friendly helper / shopper)
            - tell Maven dependencies required by projects
            - Maven download JAR files & make avail during compile / run


        How Maven works:
            1) there exist Maven Central Repository on internet
            2) Inside project dir, specify in maven config file what are dependencies required
            3) Maven check local repo (on local computer) for required files
            4) If not in local repo, Maven look into remote repo & download required files to local repo (cache)
            5) Maven will then build & run app

        How Maven helps in dependency
            - When using Spring, Maven knows Spring requires commons-logging
            - Maven will grab additional items required by Spring

        - Maven also handles class / build paths
            - based on config file, Maven will add JAR files accordingly



    -- Maven Project Directory / Spring Boot Project Structure --

        1) Spring Initializr helps create Maven project (zip file -> unzip & open with IDE)

        - have standard directory structure
        - to standardize project directory structure amongst all dev teams

            - pom.xml : config file for maven ("shopping list")

            - "/src/main/java" : store java src codes
                - <package_structure>/*.java src codes

            - "/src/main/resources" : store properties / config files for app
                - application.properties: Springboot load properties from this file
                    - created by Spring initializr (empty file by default)

                    server.port=8585 (default is 8080)
                    coach.name=Mickey Mouse (own custom property)
                    team.name=The Mouse Crew

                    - Using custom properties -

                        @RestController
                        public class MyRestController {
                            @Value("${coach.name}")
                            private String coachName;

                            @Value("${team.name}")
                            private String teamName;
                        }
                
                - ./resources/static : stores static content for app
                    - HTML | CSS | JS | images etc.

                - ./resources/templates : Springboot load templates from /templates dir
                    - Springboot includes auto config for the following template engines:
                        - FreeMarker
                        - Thymeleaf (popular engine, used in this course)
                        - Mustache


            - "/src/main/webapp : JSP | web config files + other assets (images / css / js etc)
                -JSP (Java Server Pages): Webpages that support dynamic content (JSP tags for content <% %>)

                * Do not use this dir if app is packaged as JAR
                * Only works with WAR packaging if want to use this dir

            - /src/test: Unit testing src codes + properties / config files used by unit testing

            - /target: destination directory for compiled code, auto created by Maven


        - Maven Wrapper files -
                mvnw & mvnw.cmd
            - allow system to run Maven project without having Maven installed 
            - if correct version of Maven not found locally, will auto download correct version
            - 2 files provided:
                1) mvnw.cmd : for windows -> runs "mvnw clean compile test"
                1) mvnw.sh for linux / mac -> runs "./mvnw clean compile test"

            - if have Maven installed, can ignore / delete mvnw wrapper files
                - just use Maven in cmd : "mvn clean compile test" (no need mvnw)
            



    Benefits of Maven standard file structure:
        1) Dev can find files easily
        2) IDEs can easily read Maven projects (can share Maven projects across IDEs)

    Benefits of Maven:
        1) Dependency Management    
            - Maven find JAR files for us
        2) Build & Run projects
            - No more buildpath / classpath issues
        3) Standard directory structure
        4) Join new project & be productive


    - Maven Key Concepts -

        * Java Project: IDE-level grouping
            - set of sources files, configs, assets that make up a working app

        - pom.xml -

            - Project Object Model file
            - config file for project (tell Maven dependencies of app)
            - always located in root of Maven project

            - Inside pom.xml: (3 sections)
                - project meta data
                    - project name, version, output file type (JAR | WAR) etc.

                - Springboot Starter Parent 
                    - special starter providing maven defaults (java version, UTF-8 encoding etc.)
                    - specified with <parent> tag
                    - Springboot version specified here, all other springboot starters inherit version from parent
                    - to overwrite default, specify in <properties> tag

                    	<properties>
                            <java.version>17</java.version>
                        </properties>

                - dependencies
                    -  list of projects (modules) app is dependent on
                        - Spring, Hibernate, JSON etc.

                    - <artifactId> spring-boot-starter-web </artifactId>
                        - Spring boot starters : collection of dependencies grouped together
                            -  spring-web | spring-webmvc | hibernate-validator | tomcat etc.
                        - Developers dont have to specify all individual dependencies, just user starter
                        - 1 stop shop containing all basic necessary dependencies
                        - tested & verified by Spring Dev team
                        - makes it easier for devs to get started with Spring

                        eg:
                        Building Spring MVC app:
                            - need org.springframework | org.hibernate.validator | org.thymeleaf 
                            - + 3 more artifacts
                            - very long
                        
                        solution: org.springframework.boot + artifact: spring-boot-starter-web 
                            - becomes compact

                        - How to get spring-boot-starters in pom.xml file? -
                            - specify dependencies in Spring Initializr

                            eg: If want Web + Security
                            add the following projects:
                                - Spring Web (spring-boot-starter-web)
                                - Spring Security (spring-boot-starter-security)
                                - Spring Data JPA (spring-boot-starter-jpa)
                                - ThymeLeaf (spring-boot-starter-thymeleaf)

                        - 30+ Springboot starters from Spring dev team
                        (https://www.luv2code.com/spring-boot-starters)

                        - How to view what dependencies are in a Springboot starter? -
                            - via IDE dependency manager (different IDE, slightly different)
                            For IntelliJ:
                                View -> Tool Windows -> Maven -> Select desired app -> Dependencies -> relevant starter dropdown
                
                        
                
                
                - plug-ins
                    - custom tasks to run
                        - generate JUnit test report etc.

                    - <artifactId>spring-boot-maven-plugin</artifactId>
                        - to package executable jar | war ("./mvnw package" in linux)
                        - also to easily run the app ("./mvnw spring-boot:run" in linux)
                            * if have maven installed, just use mvn, dont need add w

                        
        
            - Project Coordinates - (GAV) Group, Artifact, Version (Lingo)

                - uniquely identify a project
                - akin to GPS lat & long, precise info for finding project

                    <groupId> com.luv2code </groupId> ("City")
                    <artifactId> mycoolapp </artifactId> ("Street")
                    <version> 1.0 FINAL </version> ("House number") (optional)

                    groupId: Name of company | group | organization
                        - convention: reverse domain: com.luv2code etc.
                    
                    artifactId: Name of project (eg. mycoolapp)

                    version: specific release version (optional)
                        if under development: 1.0-SNAPSHOT

            

            - Adding Dependencies (in pom.xml) -

                <dependencies>
                    <dependency>
                        <groupId> </groupId>
                        <artifactId> </artifactId>
                        <version> </version>
                    </dependency>

                    <dependency>
                        <groupId> </groupId>
                        <artifactId> </artifactId>
                        <version> </version>
                    </dependency>
                </dependencies>


                - How to Find Dependency Coordinates? -
                    1) Visit Project page eg: spring.io | hibernate.org etc. (good for smaller proj)
                    2) https://search.maven.org (easiest approach, esp for large proj) (Maven central repo)
            



== Starting Development Process ==

    1) Configure project @ spring initializr website (quick way to get config setup)
        - go to https://start.spring.io

            Config:
                - choose Maven
                - Choose Java
                - Choose latest version of Spring boot (avoid SNAPSHOT (beta))
                - group: com.lucaslearning.springboot.demo
                - Artifact | Name: mycoolapp
                - Add Dependencies:
                    - Spring Web (+ any others as required)
                - Click generate

    2) Download zip file
    3) unzip file
    4) import project into IDE 
        - tomcat typically binded to port 8080
        - src -> main -> java -> <group_name> -> <app_name>
            - open app & run, go to localhost:8080. should see whitelabel error


== Creating simple REST Controller ==

    1) Right click "com.lucaslearning.springboot.demo.mycoolapp"& create new package
        - name it "com.lucaslearning.springboot.demo.mycoolapp.rest"
                - new package essentially a new folder (named "rest")

    2) Create new class called MyRestController within "rest" package


        import org.springframework.web.bind.annotation.RestController;

            @RestController
            public class MyRestController {
                // expose "/" to return "Hello World"

                @GetMapping("/") // Handle HTTP GET requests for "/" path
                public String sayHello() {
                    return "Hello, World!";
                }
            }

    3) Go to MycoolappApplication
        - Run app
        
    4) Go to localhost:8080 
        - should see Hello, World!



== Spring Projects ==
    * Java typically call these libraries as projects (in JS, its like Express.js | mongoose | nodemon etc.)
    - Additional Spring modules built on top of Spring framework (add-ons)
    - Only use what is needed
        - Spring Cloud | Spring Data
        - Spring Batch | Spring Security
        - Spring Web Services | Spring LDAP (Lightweight Directory Access Protocol)
        - many others...
    
    www.spring.io (To get more info on Spring)
        - Projects -> Overview







== Springboot dev tools ==

    - spring-boot-devtools
        - automatically restarts app when code updated (like nodemon)
        - simply add dependency in POM file, no need to add additional code
        - some IDE, work out of box. For IntelliJ community, need some configuration
            1) Settings -> Build, Execution, Deployment -> Compiler -> check "Build Project Automatically"
            2) Settings -> Advanced Settings -> check "Allow auto-make to start even if developed app is currently running"

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
        </dependency>




== Springboot Actuator ==
    - monitor / manage app + check app health + access app metrics
    - exposes endpoints to monitor / manage app
    - add dependency to POM file to use

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        * rightclick -> reload maven project

    - automatically exposes endpoints for metrics 
    - endpoints will be prefixed with /actuator
        eg:
            /actuator/health: health info about app
            - by default, only /health is exposed
            
            /actuator/info : provides more info about app

                - need to change config to expose 
                    1) go to src/main/resources/application.properties

                    2) 
                        management.endpoints.web.exposure.include=health, info
                        management.info.env.enabled=true

                        Alternatively:
                        management.endpoints.web.exposure.include=*
                            - expose all actuator endpoints
                            - Not recommended (should include security to show endpoints to authorized users)

                    3) Update app info inside application.properties:

                        info.app.name=My Super cool app
                        info.app.description=Super fun app
                        info.app.version=1.0.0

                        * Properties starting with info. will be used by /info endpoint

            localhost:8080/actuator/health
        
    - Different actuator endpoints:
        /actuator/auditevents : audit events for app
        /actuator/beans : list all beans registered in all
        /actuator/mappings: list all @<Request>Mapping paths
        /actuator/threaddump : list all threads running in app
            - useful for analyzing & profiling app's performance
        (https://www.luv2code.com/actuator-endpoints)


    - Springboot Actuator Security -
        - add Spring Security to secure endpoints


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        - user have to enter user & pw to access certain endpoints
            default username: user
            password: generated in server-side console

        - To add custom user & pw, include in application.properties config file

            spring.security.user.name=lucas
            spring.security.user.password=root

        - Can actually add more customized security features
            - using database for roles, encrypted passsword etc.


        - can also exclude certain actuator endpoints (in application.properties)
            management.endpoints.web.exposure.exclude=health, info
            (excludes /actuator/health & /actuator/info)