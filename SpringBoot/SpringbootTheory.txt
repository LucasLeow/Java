Course Learnings:
- Use Hibernate / JPA (Java Persistence API) for database access
- REST API using Spring Boot
- Spring MVC app
- Springboot app to DB for CRUD
- Spring Security to control app access
- Use Java config (no XML) & Maven


Latest version (2023)
    - Spring Boot 3
    - Spring 6
    - IntelliJ


JDK | JRE | JVM

To compile Java code: Need Java Development Kit (JDK)
    - .java -> .class
    - when installing JDK, JRE & JVM installed together

JVM: To run .class code

JRE: contains all the Java API libraries
    - JVM within JRE (JVM part of JRE, cannot have JVM without JRE)




== SpringBoot Overview ==
    -  popular framework for Java app
    - large number of helper classes & annotations

    Problem: (when building Spring app)
        1) Which JAR dependencies needed
            - Java ARchive: many Java classes zipped together
        2) How to set up config (XML or Java)
        3) How to install server (Tomcat / JBoss etc.)  
    
    Solution (Springboot):
        - minimize amount of manual config
        - auto config based on prop-files & JAR classpath
        - resolve dependency conflicts (Maven or Gradle) -> think of Maven / Gradle like npm / pip
        - embedded HTTP server for quick start

    -- Springboot vs Spring --
        - Springboot wraps around Spring (makes it easier to use Spring)
    

    -- Spring Initializer --
        - Quickstart Spring boot project
            1) go to https://start.spring.io
            2) Select dependencies
            3) Creates Maven/Gradle project (downloadable)
            4) Import project into IDE

    
    - Springboot provides embedded server
        - inside mycoolapp.jar
            - contains source code (.java files)
            - Tomcat | Jetty | Undertow etc. server
        - Self-contained unit, don't have to install anything else
        - Can run Springboot app standalone (from IDE / cmdline)
            java -jar mycoolapp.jar


    - Deploying Springboot App -
        - Can be deployed traditionally (WAR file) to external server (Tomcat | JBoss | Websphere etc.)
            WAR: Web App Archive

            eg:

                Within Tomcat Server 1:

                    1) mycoolapp.war
                    2) travelapp.war
                    3) shoppingapp.war

                    3 apps deployed in Server 1



    -- FAQs --
        1) Does Springboot replace Spring MVC / Spring REST?
            - No, Springboot wraps around those technologies
                - Spring MVC | REST | Core | AOP etc.
            - Springboot is just helping to get setup quickly with configuration
        
        2) Does Springboot run faster than Spring code?
            - No, Springboot wraps around Spring framework



== What is Maven ==
    - Project Management Tool like npm (build-automation tool)
        - build management + dependencies management

    - When building java project, may require additional JAR files
        - Spring | Hibernate | Commons logging | JSON etc.

        Manual Solution:
            - Go to each project website to download JAR files
            - Manually add JAR files to build path

        Maven Solution: (think like friendly helper / shopper)
            - tell Maven dependencies required by projects
            - Maven download JAR files & make avail during compile / run


        How Maven works:
            1) there exist Maven Central Repository on internet
            2) Inside project dir, specify in maven config file what are dependencies required
            3) Maven check local repo (on local computer) for required files
            4) If not in local repo, Maven look into remote repo & download required files to local repo (cache)
            5) Maven will then build & run app

        How Maven helps in dependency
            - When using Spring, Maven knows Spring requires commons-logging
            - Maven will grab additional items required by Spring

        - Maven also handles class / build paths
            - based on config file, Maven will add JAR files accordingly

        
    -- Maven Project Directory --
        - have standard directory structure
        - to standardize project directory structure amongst all dev teams

            - pom.xml : config file for maven ("shopping list")

            - "/src/main/java" : store java src codes
                - <package_structure>/*.java src codes

            - "/src/main/resources" : store properties / config files for app

            - "/src/main/webapp : JSP | web config files + other assets (images / css / js etc)
                -JSP (Java Server Pages): Webpages that support dynamic content (JSP tags for content <% %>)

            - /src/test: Unit testing src codes + properties / config files used by unit testing

            - /target: destination directory for compiled code, auto created by Maven

    Benefits of Maven standard file structure:
        1) Dev can find files easily
        2) IDEs can easily read Maven projects (can share Maven projects across IDEs)

    Benefits of Maven:
        1) Dependency Management    
            - Maven find JAR files for us
        2) Build & Run projects
            - No more buildpath / classpath issues
        3) Standard directory structure
        4) Join new project & be productive


    - Maven Key Concepts -

        * Java Project: IDE-level grouping
            - set of sources files, configs, assets that make up a working app

        - pom.xml -

            - Project Object Model file
            - config file for project (tell Maven dependencies of app)
            - always located in root of Maven project

            - Inside pom.xml: (3 sections)
                - project meta data
                    - project name, version, output file type (JAR | WAR) etc.
                - dependencies
                    -  list of projects (modules) app is dependent on
                        - Spring, Hibernate, JSON etc.
                - plug-ins
                    - custom tasks to run
                        - generate JUnit test report etc.
                


            - Project Coordinates - (GAV) Group, Artifact, Version (Lingo)

                - uniquely identify a project
                - akin to GPS lat & long, precise info for finding project

                    <groupId> com.luv2code </groupId> ("City")
                    <artifactId> mycoolapp </artifactId> ("Street")
                    <version> 1.0 FINAL </version> ("House number") (optional)

                    groupId: Name of company | group | organization
                        - convention: reverse domain: com.luv2code etc.
                    
                    artifactId: Name of project (eg. mycoolapp)

                    version: specific release version (optional)
                        if under development: 1.0-SNAPSHOT

            

            - Adding Dependencies (in pom.xml) -

                <dependencies>
                    <dependency>
                        <groupId> </groupId>
                        <artifactId> </artifactId>
                        <version> </version>
                    </dependency>

                    <dependency>
                        <groupId> </groupId>
                        <artifactId> </artifactId>
                        <version> </version>
                    </dependency>
                </dependencies>


                - How to Find Dependency Coordinates? -
                    1) Visit Project page eg: spring.io | hibernate.org etc. (good for smaller proj)
                    2) https://search.maven.org (easiest approach, esp for large proj) (Maven central repo)
            




== Development Process ==

    1) Configure project @ spring initializr website (quick way to get config setup)
        - go to https://start.spring.io

            Config:
                - choose Maven
                - Choose Java
                - Choose latest version of Spring boot (avoid SNAPSHOT (beta))
                - group: com.lucaslearning.springboot.demo
                - Artifact | Name: mycoolapp
                - Add Dependencies:
                    - Spring Web (+ any others as required)
                - Click generate

    2) Download zip file
    3) unzip file
    4) import project into IDE 
        - tomcat typically binded to port 8080
        - src -> main -> java -> <group_name> -> <app_name>
            - open app & run, go to localhost:8080. should see whitelabel error


== Create REST Controller ==

    1) Right click "com.lucaslearning.springboot.demo.mycoolapp"& create new package
        - name it "com.lucaslearning.springboot.demo.mycoolapp.rest"
                - new package essentially a new folder (named "rest")

    2) Create new class called MyRestController within "rest" package


        import org.springframework.web.bind.annotation.RestController;

            @RestController
            public class MyRestController {
                // expose "/" to return "Hello World"

                @GetMapping("/") // Handle HTTP GET requests for "/" path
                public String sayHello() {
                    return "Hello, World!";
                }
            }

    3) Go to MycoolappApplication
        - Run app
        
    4) Go to localhost:8080 
        - should see Hello, World!



== Spring Projects (Modules) ==

    - Additional Spring modules built on top of Spring framework (add-ons)
    - Only use what is needed
        - Spring Cloud | Spring Data
        - Spring Batch | Spring Security
        - Spring Web Services | Spring LDAP (Lightweight Directory Access Protocol)
        - many others...
    
    www.spring.io (To get more info on Spring)
        - Projects -> Overview