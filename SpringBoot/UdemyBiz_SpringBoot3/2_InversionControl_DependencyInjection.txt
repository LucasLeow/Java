Inversion of Control:
    - outsourcing construction & management of objects (using controller)
    - instead of direct interaction eg: Person & Pet | Person & Coach
        - Person <-> Controller <-> Pet | Person <-> Controller <-> Coach
    - a design pattern

    Coding Scenario:
        - Fitness app that communicates with relevant fitness coach
            - different sports coach will provide different program

        - App communicate with "Object Factory"
        - Object factory will return relevant coach (based on config)
            - cricketCoach
            - HockeyCoach
            - BaseballCoach

    Spring Container: (performs inversion of control)
        - create & manage objects 
        - Inject object dependencies (dependency injection)

        - Configuring Spring Container -
            - XML config file (legacy) (seldom used)
            - Java Annotation (modern)
            - Java source code (modern)


== Spring Dependency Injection ==
    - based on dependency inversion principle
    - client delegates to another object the responsibility of providing dependencies
    - eg: app ask info from Controller, Controller get info from database

    eg (Car Factory):
        - User wants a car
        - User request car object from "Car Factory"
        - "Car Factory" responsible for assembling car & returns to user
        - User can use car out-of-box, without worrying about dependency

        "Car Factory" injects the dependency
        - Car Factory here is the controller

    Real eg:
        - app request coach object from Spring Container (Object factory)
        - different coach (cricket | hockey | baseball) have different dependencies
        - Spring container injects the necessary dependency and return coach object to app

    - Injection Types -

        - Constructor Injection
            - use when have required dependencies
            - recommended by spring dev team as first choice

        - Setter Injection
            - use when have optional dependencies
            - if dependency not provided, app can provide reasonable default logic


    - Spring AutoWiring -
        (org.springframework.beans.factory.annotation.Autowired) <- AutoWired class
        - For purpose of dependency injection
        - Spring will look for class that matches class | interface & auto injects it

            @Autowired <- Annotation tells Spring to inject dependency
            public DemoController(Coach theCoach) <- Autowired applied to constructor (DemoController)


    - Autowiring example (Inject Coach to Controller) -
        - Spring scan for @Components for dependency implementation
        - eg: Any Coach interface implementation? @Component at BowlingCoach
        - if yes, inject


    - Dependency Injection eg 2 -

        - WebBrowser
            - sends request to DemoController via (/dailyworkout)
        - DemoController
            - communicates with "Coach Factory" via (getDailyWorkout())
        - "Coach Factory" returns string of guiding text
        - DemoController passes string to Web Browser

        DemoController wants to use "Coach" object
            - Coach provide daily workouts
            - Coach is known as helper
            - DemoController dependent on Coach (need to inject to DemoController)


    Development Process (Constructor Injection) (Single "coach" implementation eg)
        1) Define dependency interface & class

            File: Coach.java
                package com.luv2code.springcoredemo;

                public interface Coach {
                    String getDailyWorkout();
                }

            File: BowlingCoach.java
                package com.luv2code.springcoredemo;

                import org.springframework.stereotype.Component;

                @Component <- component annotation makes class a Spring bean (make avail for Spring Scanning for injection)
                public class BowlingCoach implements Coach {
                    @Override
                    public String getDailyWorkout() {
                        return "Practice fast bowling for 15 minutes";
                    }
                }

        @Component annotation

        - marks class as Spring Bean
            - Spring Bean: Regular Java class managed by Spring
        - makes bean available for dependency injection (via scanning)

        2) create demo REST controller (middleman)
        (Step 2, 3 & 4 in same file)

            File: DemoController.java
                package com.luv2code.springcoredemo;

                import org.springframework.web.bind.annotation.RestController;

                @RestController
                public class DemoController { 
                    ..
                }

        3) create constructor in (Middleman) Controller class for injection

                Still in same file: DemoController.java
                package com.luv2code.springcoredemo;

                import org.springframework.beans.factory.annotation.Autowired;
                import org.springframework.web.bind.annotation.RestController;

                @RestController
                public class DemoController {
                    private Coach myCoach; <- private field to store dependency

                    @Autowired <- Autowired tells spring to inject dependency | of only 1 constructor, @Autowired optional
                    public DemoController(Coach theCoach) {
                        myCoach = theCoach;
                    }
                }

        4) add @GetMapping for /dailyworkout

                (still in same file)
                File: DemoController.java
                package com.luv2code.springcoredemo;

                import org.springframework.beans.factory.annotation.Autowired;
                import org.springframework.web.bind.annotation.GetMapping;
                import org.springframework.web.bind.annotation.RestController;

                @RestController
                public class DemoController {
                    private Coach myCoach;

                    @Autowired <- Autowired attached to constructor
                    public DemoController(Coach theCoach) {
                        myCoach = theCoach;
                    }

                    @GetMapping("/dailyworkout")
                    public String getDailyWorkout() {
                        return myCoach.getDailyWorkout();
                    }
                }

    
== Spring Framework (Behind the scenes for Dependency Injection) ==
    
    Coach theCoach = new BowlingCoach();
    DemoController demo = new DemoController(theCoach);

    - Spring seem simple for small apps
    - Spring provides much more functionality, especially for enterprise apps
        - Spring Web | Database CRUD | Security | Endpoints etc.
    

== @Component Scanning ==

    - Spring scan Java classes for special annotations (eg: @Component)
    - auto register beans in Spring container (bean = java class in Spring)

    - inside SpringcoredemoApplication.java: (created by spring initializr)
        - import org.springframework.boot.autoconfigure.SpringBootApplication;
            - Behind the scenes:
                - enables auto config | component scanning | additional config 
                    - @EnableAutoConfiguration : Enables Springboot auto-config support
                    - @ComponentScan : enable component scanning of current package + sub packages
                    - @Configuration : register extra beans with @Bean or import other config classes

        - import org.springframework.boot.SpringApplication;
            - Allow bootstrapping of Spring boot app
                - Behind the scenes:
                    - Creates application context (load configuration) & register all beans
                    - starts embedded server (Tomcat etc.)

    - Springboot will only auto-scan components in package where app resides + all sub packages within that package
    - Any other sibling packages with app package will not be scanned

    - (eg: com.luv2code.springcoredemo ) <- main app package
         com.luv2code.springcoredemo.items <- sub-package, will also be scanned

    - If want to scan other packages:
        - inside SpringcoredemoApplication.java:
            @SpringBootApplication(
                scanBasePackages={
                    "com.luv2code.springcoredemo",
                    "com.luv2code.utils",
                    "com.luv2code.cart"
                }
            )
            public class SpringcoredemoApplication {
                ...
            }


    == @Component Scanning Code Eg ==

        1) Create new sub package (right click com.luv2code.springcoredemo)
            - com.luv2code.springcoredemo.rest
            - com.luv2code.springcoredemo.common

        2) Move DemoController.java into "rest" package
            - Move Coach & BowlingCoach into "common" package

        3) Run app, still works fine since files are moved to sub-packages
        (Spring still scans for components in sub-packages)


        - Part 2 -
        
        1) Create new sibling package (right click from "java" dir instead)
            - com.luv2code.util

        2) move Coach & BowlingCoach to com.luv2code.util

        3) Go to SpringcodedemoApplication.java
            - @SpringBootApplication(
                scanBasePackages = {
                    "com.luv2code.springcoredemo",
                    "com.luv2code.util"
                        }
                )


== Setter Injection ==  
    - inject dependencies by calling setter methods on class


    - Development Process (Setter Injection) -

        1) Create setter methods inside (Middleman) Controller for injection

        2) Configure dependency injection with @Autowired annotation on setter

        @RestController
        public class DemoController {
            private Coach myCoach;

            @Autowired
            public void setCoach(Coach theCoach) {
                myCoach = theCoach;
            }
        }

        * Spring perform operations behind the scenes

            Coach theCoach = new BowlingCoach();
            DemoController demo = new DemoController();
            demo.setCoach(theCoach);

        * Can inject dependencies by calling ANY method on class
            - just have @Autowired annotation


== Field Injection ==
    - not recommended by spring dev team
    - makes code harder to unit test
    - still present in legacy projects, good to know only

    - Inject dependencies by setting field values on class directly (even private fields)

    1) Configure dependency injection with Autowired Annotation

        @Autowired
        private Coach myCoach; // Spring will inject coach implementation (if found, even on private field)
            - no need for constructor / setters, spring set field directly



== @Qualifiers Annotation (Solution to multiple implementation of interface)==

    - if multiple coach implementation, Spring throws error
    - eg: required single bean, 4 found
        - baseballCoach
        - cricketCoach
        - tennisCoach
        - trackCoach

    - Solution : @Qualifier annotation (to be specific)
        - using beanID
            - beanID: same as class name but first letter lowercase
            actual class: CricketCoach
            bean ID: cricketCoach

        Constructor Injection:
            @Autowired
            public DemoController(@Qualifier("cricketCoach") Coach theCoach) {
                myCoach = theCoach
            }

        Setter Injection:
            @Autowired
            public void setCoach(@Qualifier("cricketCoach") Coach theCoach) {
                myCoach = theCoach
            }



== @Primary annotation ==
    - alternate solution to @Qualifier annotation
    - don't care about specific implementation
    - if there exist multiple implementations, give me a primary coach
    - to be implemented by the implementation class
    * ONLY 1 implementation, cannot have multiple @Primary, error thrown
    - @Qualifier has higher priority (more specific)
        - Mixing @Qualifier & @Primary is not useful

    @Component
    @Primary
    public class TrackCoach implements Coach {
        @Override
        public String getDailyWorkout() {
            return "Run a hard 5k!";
        }
    }

    - With @Primary implemented, no need to use @Qualifier in Controller
    - In general, @Qualifier recommended
        - more specific + higher priority


== Lazy Initialization ==

    - by default, all beans are initialized when app starts
        - Spring creates instance of each & make available

    - Can check:
        - inside constructor:

        public CricketCoach() {
            System.out.println("In constructor: " + getClass().getSimpleName());
        }
            

    - Lazy Initialization - (dont init all beans when app starts)
        - only create beans when:
            1) needed for dependency injection
            2) explicitly requested

        - simply using @Lazy annotation to mark bean as lazy (wont create during startup)

        @Component
        @Lazy
        public class TrackCoach implements Coach {
            System.out.println("In constructor: " + getClass().getSimpleName());
        }

    
        - Global config: Lazy Initialization
            - to prevent adding annotation to every single class (tedious)
            - Go to application.properties:
                spring.main.lazy-initialization=true
                (all beans are lazy, including DemoController)

    Advantage:
        - only create objects as needed
        - may help with faster startup time if large number of components

    Disadvantage:
        - may not discover config issues until too late
        - need to ensure have sufficient memory for all beans once created

    (lazy init disabled by default, avoid premature optimization)


== Bean Scope ==
    - Scope : Lifecycle of a bean
        - how long does bean live
        - how many instances of bean created
        - how is bean shared

    - Default scope: singleton
        - only 1 instance created by default (shared amongst different items)
        - cached in memory
        - all dependency injection for the bean will reference SAME bean

        // theCoach & Anothercoach point to the same instance
            public DemoController(
                @Qualifier("cricketCoach") Coach theCoach,
                @Qualifier("cricketCoach") Coach AnotherCoach
            ) {

            }

    - Can explicitly define bean scope

        @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON) 
        public class CricketCoach implements Coach {
            ...
        }

    - scope types:
        - singleton : create single shared instance of bean (SCOPE_SINGLETON)
        - prototype : create new bean instance for each container request (new instance for each injection)
        - request : scoped to http web req, only for web apps (SCOPE_REQUEST)
        - session : scoped to http web session, only for web apps (SCOPE_SESSION)
        - global-session : scoped to global http session, for web apps


== Bean Lifecycle Methods ==
    
    - Bean Lifecycle -
        1) Container Started (App start)
        2) Bean instantiated (not lazy by default)
        3) Dependencies injected (as required)
        4) Internal Spring Processing

        5) Execute custom init method <- can implement Bean Lifecycle method / hook

        6) Custom destroy method (when app shutdown)


    - Bean Methods / Hooks
        - add custom code during bean initialization
        - calling custom business logic
        - setting up handles to resources (db, sockets, files etc.)
        - custom code during bean destruction (cleaning up handles to resources)\
            - close db / stream etc.

    - using:
        - @PostConstruct annotation
        - @PreDestroy annotation
            * For prototype-scope, Spring does not call destroy method
            - prototype beans are lazy by default, don't need to use @Lazy


    @Component
    public class CricketCoach implements Coach {
        public CricketCoach() {
            System.out.println("Inside constructor");
        }

        @PostConstruct
        public void doMyStartupStuff() {
            System.out.println("Doing startup stuff" + getClass().getSimpleName());
        }

        @PreDestroy
        public void doMyCleanUpStuff() {
            System.out.println("Doing Cleanup" + getClass().getSimpleName());
        }
    }


== Configuring Beans with Java code @Bean instead of @Component annotation ==
    - use case: to make 3rd party class available to spring framework as bean
    - especially when no access to 3rd party source code

    1) Create @Configuration class
        - create new package (config) to store all config classes
        (com.luv2code.springcoredemo.config)

    2) Define @Bean method to configure bean
        - bean id defaults to method name
        - bean id = swimCoach in this eg.

            @Configuration
            public class SportConfig {
                
                @Bean
                public Coach swimCoach() {
                    return new SwimCoach();
                }

            }

        * Can give bean custom id
        @Bean("my_custom_id")

        then in controller:
        public DemoController(@Qualifier("my_custom_id") Coach theCoach) {
            myCoach = theCoach;
        }


    3) Inject bean into controller
        - inject Bean using bean id & @Qualifier

        @RestController
        public class DemoController {

            private Coach myCoach;

            @Autowired
            public DemoController(@Qualifier("swimCoach") Coach theCoach) { 
                System.out.println("In swimcoach Constructor");
                myCoach = theCoach;
            }
        }


    - @Bean use cases -

        - make existing 3rd party class available to Spring framework
        - may not have access to source code of 3rd party class
            - cannot implement @Component, therefore must use @Bean


    Real world eg:
        - Store data in AWS S3
        - Want to use AWS S3 as Spring bean in app
        - AWS S3 code part of AWS SDK (cannot modify source code, i.e add @Component)
        - can configure it as spring bean using @Bean

        @Configuration
        public class DocumentsConfig {

            @Bean
            public S3Client remoteClient() {
                ProfileCredentialsProvider.credentialsProvider = ProfileCredentialsProvider.create();
                Region region = Region.US_EAST_1;
                S3Client s3Client = S3Client.builder()
                    .region(region)
                    .credentialsProvider(credentialsProvider)
                    .build();

                return s3Client; // s3Client is a bean
            }
        }

        - Inject s3Client as bean:

        @Component
        public class DocumentsService {
            private S3Client s3Client;

            @Autowired 
            public DocumentsService(S3Client thes3client) {
                s3Client = thes3client;
            }
        }