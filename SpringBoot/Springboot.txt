Course Learnings:
- Use Hibernate / JPA (Java Persistence API) for database access
- REST API using Spring Boot
- Spring MVC app
- Springboot app to DB for CRUD
- Spring Security to control app access
- Use Java config (no XML) & Maven


Latest version (2023)
    - Spring Boot 3
    - Spring 6
    - IntelliJ


JDK | JRE | JVM

To compile Java code: Need Java Development Kit (JDK)
    - .java -> .class
    - when installing JDK, JRE & JVM installed together

JVM: To run .class code

JRE: contains all the Java API libraries
    - JVM within JRE (JVM part of JRE, cannot have JVM without JRE)




== SpringBoot Overview ==
    -  popular framework for Java app
    - large number of helper classes & annotations

    Problem: (when building Spring app)
        1) Which JAR dependencies needed
            - Java ARchive: many Java classes zipped together
        2) How to set up config (XML or Java)
        3) How to install server (Tomcat / JBoss etc.)  
    
    Solution (Springboot):
        - minimize amount of manual config
        - auto config based on prop-files & JAR classpath
        - resolve dependency conflicts (Maven or Gradle) -> think of Maven / Gradle like npm / pip
        - embedded HTTP server for quick start

    -- Springboot vs Spring --
        - Springboot wraps around Spring (makes it easier to use Spring)
    

    -- Spring Initializer --
        - Quickstart Spring boot project
            1) go to https://start.spring.io
            2) Select dependencies
            3) Creates Maven/Gradle project (downloadable)
            4) Import project into IDE

    
    - Springboot provides embedded server
        - inside mycoolapp.jar
            - contains source code (.java files)
            - Tomcat | Jetty | Undertow etc. server
        - Self-contained unit, don't have to install anything else
        - Can run Springboot app standalone (from IDE / cmdline)
            java -jar mycoolapp.jar


    - Deploying Springboot App -
        - Can be deployed traditionally (WAR file) to external server (Tomcat | JBoss | Websphere etc.)
            WAR: Web App Archive

            eg:

                Within Tomcat Server 1:

                    1) mycoolapp.war
                    2) travelapp.war
                    3) shoppingapp.war

                    3 apps deployed in Server 1



    -- FAQs --
        1) Does Springboot replace Spring MVC / Spring REST?
            - No, Springboot wraps around those technologies
                - Spring MVC | REST | Core | AOP etc.
            - Springboot is just helping to get setup quickly with configuration
        
        2) Does Springboot run faster than Spring code?
            - No, Springboot wraps around Spring framework



== What is Maven ==
    - Dependency manager like npm (build-automation tool)
    - When building java project, may require additional JAR files
        - Spring | Hibernate | Commons logging | JSON etc.

        Manual Solution:
            - Go to each project website to download JAR files
            - Manually add JAR files to build path

        Maven Solution: (friendly helper / shopper)
            - tell Maven dependencies
            - Maven download JAR files & make avail during compile / run


== Development Process ==

    1) Configure project @ spring initializr website (quick way to get config setup)
        - go to https://start.spring.io

            Config:
                - choose Maven
                - Choose Java
                - Choose latest version of Spring boot (avoid SNAPSHOT (beta))
                - group: com.lucaslearning.springboot.demo
                - Artifact | Name: mycoolapp
                - Add Dependencies:
                    - Spring Web (+ any others as required)
                - Click generate

    2) Download zip file
    3) unzip file
    4) import project into IDE 
        - tomcat typically binded to port 8080
        - src -> main -> java -> <group_name> -> <app_name>
            - open app & run, go to localhost:8080. should see whitelabel error


== Create REST Controller ==

    1) Right click "com.lucaslearning.springboot.demo.mycoolapp"& create new package
        - name it "com.lucaslearning.springboot.demo.mycoolapp.rest"
                - new package essentially a new folder (named "rest")

    2) Create new class called MyRestController within "rest" package


        import org.springframework.web.bind.annotation.RestController;

            @RestController
            public class MyRestController {
                // expose "/" to return "Hello World"

                @GetMapping("/") // Handle HTTP GET requests for "/" path
                public String sayHello() {
                    return "Hello, World!";
                }
            }

    3) Go to MycoolappApplication
        - Run app
        
    4) Go to localhost:8080 
        - should see Hello, World!